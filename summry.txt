// ...existing code...

/*
Roman Urdu Explanation (Line by Line):

// 1-3: Ye lines comment hain, yahan console.log aur variables ka example diya gaya hai.
// 4: 'http' module ko require kiya gaya hai, server banane ke liye.
// 5: 'fs' module ko require kiya gaya hai, file system se related kaam ke liye.
// 6: 'path' module ko require kiya gaya hai, file path handle karne ke liye.
// 7: 'filePath' variable banaya gaya hai, jo current directory mein 'text.txt' file ka path set karta hai.
// 8: 'server' variable mein HTTP server create kiya gaya hai.
// 9: Server pe request aati hai, usko handle karne ke liye callback function diya hai.
// 10: Agar request ka URL '/' hai, to 'Hello World!' response bhej diya jata hai.
// 11: Response ko end kar diya jata hai.
// 12: Agar request ka URL '/form' hai, to HTML form ka response bheja jata hai.
// 13: Response ka content type 'text/html' set kiya gaya hai.
// 14-18: Ek HTML form bheja gaya hai, jismein input aur button hai.
// 19: Response ko end kar diya jata hai.
// 20: Agar request ka URL '/submit' hai, to yahan form ka data handle hota hai.
// 21: 'data' variable banaya gaya hai, jismein form ka data store hota hai.
// 22: Jab bhi data aata hai, usko 'chunks' mein add karte hain.
// 23: Data ko 'data' variable mein concatenate karte hain.
// 24: Jab data pura aajata hai ('end' event), tab file mein likhte hain.
// 25: 'fs.writeFile' se 'filePath' pe data likha jata hai.
// 26: Agar error aaye to 'Server Crash' response bheja jata hai.
// 27: Response ko end kar diya jata hai.
// 28: Agar sab sahi ho to 'Data Recieved Successfully' response bheja jata hai.
// 29: Response ko end kar diya jata hai.
// 30: Agar koi aur URL ho to '404 Not Found' response bheja jata hai.
// 31: Response ko end kar diya jata hai.
// 32: Server ko port 5000 pe listen karne ke liye kaha gaya hai.
// 33: Console pe 'Server Start....' print hota hai.

Node.js + Express.js Methods Used (Explanation):

- require(): Module ko import karne ke liye use hota hai.
- http.createServer(): Naya HTTP server banata hai.
- server.listen(): Server ko specific port pe start karta hai.
- res.write(): Client ko response bhejne ke liye use hota hai.
- res.end(): Response ko khatam karne ke liye use hota hai.
- res.setHeader(): Response ka header set karne ke liye use hota hai.
- req.on(): Request pe event listen karne ke liye use hota hai (jaise 'data' aur 'end').
- fs.writeFile(): File mein data likhne ke liye use hota hai.
- path.join(): File path ko sahi format mein banane ke liye use hota hai.
- process.cwd(): Current working directory ka path lene ke liye use hota hai.
- middleware: wo function jo request aany k baad or response jany se pehly for checking porpose create kiye jaty hyn.
- app.use() :is a fundamental method used to mount middleware functions at a specified path or for all paths.
- GET → Server se data mangwata hai.
- POST → Server ko naya data bhejta hai.
- PUT → Server pe purana data update karta hai.
- DELETE → Server se data hata deta hai.
- send() → Client ko jawab (response) bhejta hai.
- Body-parser → Client se bheja gaya data (JSON ya form) ko read karke req.body mein easily access karne ke liye use hoti hai.
- MVC Pattern: Code ko teen hisso mein divide karna—Model (data), View (user interface), aur Controller (logic)—taake code samajhna aur manage karna asaan ho jaye.
- API: Application Programming Interface
- Rest API: (Representational State Transfer) User ki demand k according Data laya jaye
- GraphQL: Flexable API
- Bcrypt Library: Ye ek library hai jo passwords ko encrypt (hash) karne ke liye use hoti hai taake wo secure ho jayein aur asaani se read na kiye ja sakein.